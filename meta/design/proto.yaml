openapi: 3.0.3
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: Swagger Project
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/adam123quiroz/project/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: tinder-page
    description: Everything about your Posts
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: visited-places
    description: Everything about places you visited
  - name: likes
    description: Everything about your posts you liked
  - name: reviews
    description: Everything about your posts reviewed
  - name: plan
    description: Everything about travel plans
  - name: category
    description: Everything about categories

paths:
  /post:
    get:
      tags:
        - tinder-page
      summary: Finds Posts by service
      description: Multiple status values can be provided with comma separated strings
      operationId: findPostsByService
      parameters:
        - in: query
          name: service
          schema:
            type: string
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
      security:
        - petstore_auth:
            - 'write:users'
            - 'read:users'
  /post/best-rating:
    get:
      tags:
        - category
      summary: Finds Posts by best rating
      description: Multiple status values can be provided with comma separated strings
      operationId: findPostsByBestRating
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
      security:
        - petstore_auth:
            - 'write:users'
            - 'read:users'
  /post/most-visited:
    get:
      tags:
        - category
      summary: Finds Posts by service
      description: Multiple status values can be provided with comma separated strings
      operationId: findPostsByService
      parameters:
        - in: query
          name: service
          schema:
            type: string
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
      security:
        - petstore_auth:
            - 'write:users'
            - 'read:users'
  /post/{postId}/like:
    post:
      tags:
        - category
      summary: Place an order for a pet
      operationId: placeOrder'
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "Post not found",
                      "error": "true",
                    }
  /post/{postId}/bookmark:
    post:
      tags:
        - category
      summary: Place an order for a pet
      operationId: placeOrder'
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "Post not found",
                      "error": "true",
                    }
  /profile/post-visited:
    get:
      tags:
        - visited-places
      summary: Find the places where the user has been
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesVisitedByUser
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent visited places
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostVisited'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
  /profile/post-likes:
    get:
      tags:
        - likes
      summary: Find posts liked by user
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesLikedByUser
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent liked by user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostLiked'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
  /profile/post-reviews:
    get:
      tags:
        - reviews
      summary: Find the post which the user has reviewed
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesReviewedByUser
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent reviewed post by user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostReviewed'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }

  /plans:
    get:
      tags:
        - plan
      summary: Find plans where user wants to travel
      description: Provide created plans by user in a list of plans
      operationId: findPlanByUser
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The user id to search places visited by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }

  /favorite-places:
    get:
      tags:
        - visited-places
      summary: Get User favorite places 
      description: Provide favorites places marked by User
      operationId: favoritePlaces
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The user id to search places visited by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  places:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlacesByPlan'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
  /plans/{planId}:
    get:
      tags:
        - plan
      summary: Find plans where user wants to travel
      description: Provide created plans by user in a list of plans
      operationId: findPlacesByPlanId
      parameters:
        - name: planId
          in: path
          description: ID of plan to return all the places that are part of plan
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  places:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlacesByPlan'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }


  /user/userInformation:
    get:
      tags:
        - plan
      summary: Find user information by id user
      description: Provide profile information about an user
      operationId: getUserInformation

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInformation'

        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "404",
                      "message": "User not found",
                      "error": "true",
                    }
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        datePosted:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostVisited:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateVisited:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostLiked:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateLiked:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostReviewed:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateReviewed:
          type: string
          format: date-time
        rating:
          type: integer

        photo:
          $ref: '#/components/schemas/File'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'

    Plan:
      type: object
      properties:
        planId:
          type: string
        name:
          type: string
        totalPlaces:
          type: integer
        departureTime:
          type: string
          format: date-time
        arrivalTime:
          type: string
          format: date-time
        dateVisited:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    
    PlacesByPlan:
      type: object
      properties:
        placeId:
          type: string
        placeName:
          type: string
        departureTime:
          type: string
          format: date-time
        arrivalTime:
          type: string
          format: date-time
        city:
          $ref: '#/components/schemas/City'
        latitude:
          type: string
        longitude:
          type: string
        dateVisited:
          type: string
          format: date-time
        addedToPlan:
          type: boolean
        photo:
          $ref: '#/components/schemas/File'


    userInformation:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        number:
          type: string
        email:
          type: string
        likes:
          type: integer
        reviews:
          type: integer
        bookmarks:
          type: integer
        photo:
          $ref: '#/components/schemas/File'

    Comments:
      type: object
      properties:
        commentId:
          type: string
        comment:
          type: string

    Department:
      type: object
      properties:
        departmentId:
          type: string
        name:
          type: string

    City:
      type: object
      properties:
        CityId:
          type: string
        name:
          type: string
        Department:
          $ref: '#/components/schemas/Department'
    

    File:
      type: object
      properties:
        id:
          type: string
        location:
          type: string
        size:
          type: integer
          format: int64
        contentType:
          type: string
    Review:
      type: object
      properties:
        id:
          type: string
        comment:
          type: string
        publicationDate:
          type: integer
          format: int64
        publicationTime:
          type: string



    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        error:
          type: boolean
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:users': modify users in your account
            'read:users': read your users
    api_key:
      type: apiKey
      name: api_key
      in: header
