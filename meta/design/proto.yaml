openapi: 3.0.3
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: Swagger Project
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/adam123quiroz/project/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: tinder-page
    description: Everything about your Posts
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: visited-places
    description: Everything about places you visited
  - name: likes
    description: Everything about your posts you liked
  - name: reviews
    description: Everything about your posts reviewed
  - name: plan
    description: Everything about travel plans

paths:
  /post:
    get:
      tags:
        - tinder-page
      summary: Finds Posts by service
      description: Multiple status values can be provided with comma separated strings
      operationId: findPostsByService
      parameters:
        - in: query
          name: service
          schema:
            type: string
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
      security:
        - petstore_auth:
            - 'write:users'
            - 'read:users'
  /profile/visited:
    get:
      tags:
        - visited-places
      summary: Find the places where the user has been
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesVisitedByUser
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The user id to search places visited by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent visited places
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  postVisited:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostVisited'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
  /profile/likes:
    get:
      tags:
        - likes
      summary: Find posts liked by user
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesLikedByUser
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The user id to search places liked by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent liked by user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  postVisited:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostLiked'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }
  /profile/reviews:
    get:
      tags:
        - reviews
      summary: Find the post which the user has reviewed
      description: Multiple status values can be provided with comma separated strings
      operationId: findPlacesReviewedByUser
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The user id to search places visited by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: dateLimit
          schema:
            type: string
          description: The date limit of items to show recent reviewed post by user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  postVisited:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostReviewed'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }

  /plans:
    get:
      tags:
        - plan
      summary: Find plans where user wants to travel
      description: Provide created plans by user in a list of plans 
      operationId: findPlanByUser
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The user id to search places visited by user
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  plansCreated:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlansCreated'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }

  /plans/places/{planId}:
    get:
      tags:
        - plan
      summary: Find plans where user wants to travel
      description: Provide created plans by user in a list of plans 
      operationId: findPlacesByPlanId
      parameters:
        - name: planId
          in: path
          description: ID of plan to return all the places that are part of plan
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  placesByPlan:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlacesByPlan'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }


  /user/userInformation/{userId}:
    get:
      tags:
        - plan
      summary: Find user information by id user
      description: Provide profile information about an user 
      operationId: getUserInformation
      parameters:
        - name: userId
          in: path
          description: Id User to get User information or profile
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInformation'

        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    {
                      "code": "400",
                      "message": "List is empty",
                      "error": "true",
                    }


# The rest of the examples
    post:
      tags:
        - post
      summary: Add a new pet to the store
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - post
      summary: Update an existing pet
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'

  /post/findByStatus:
    get:
      tags:
        - post
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /post/findByTags:
    get:
      tags:
        - post
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  '/post/{petId}':
    get:
      tags:
        - post
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
    post:
      tags:
        - post
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: [ ]
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found



components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostVisited:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateVisited:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostLiked:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateLiked:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    PostReviewed:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        datePosted:
          type: string
          format: date-time
        dateReviewed:
          type: string
          format: date-time
        review:
          type: integer
        photo:
          $ref: '#/components/schemas/File'

    PlansCreated:
      type: object
      properties:
        planId:
          type: string
        listname:
          type: string
        totalPlaces:
          type: integer
        departureTime:
          type: string
          format: date-time
        arrivalTime:
          type: string
          format: date-time
        dateVisited:
          type: string
          format: date-time
        photo:
          $ref: '#/components/schemas/File'
    
    PlacesByPlan:
      type: object
      properties:
        placeId:
          type: string
        placeName:
          type: string
        departureTime:
          type: string
          format: date-time
        arrivalTime:
          type: string
          format: date-time
        city:
          $ref: '#/components/schemas/City'
        latitude:
          type: string
        longitude:
          type: string
        dateVisited:
          type: string
          format: date-time
        addedToPlan:
          type: boolean
        photo:
          $ref: '#/components/schemas/File'


    userInformation:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        number:
          type: string
        email:
          type: string
        likes:
          type: integer
        reviews:
          type: integer
        bookmarks:
          type: integer
        photo:
          $ref: '#/components/schemas/File'

    Comments:
      type: object
      properties:
        commentId:
          type: string
        comment:
          type: string

    Department:
      type: object
      properties:
        departmentId:
          type: string
        name:
          type: string

    City:
      type: object
      properties:
        CityId:
          type: string
        name:
          type: string
        Department: 
          $ref: '#/components/schemas/Department'
    

    File:
      type: object
      properties:
        id:
          type: string
        location:
          type: string
        size:
          type: integer
          format: int64
        contentType:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        error:
          type: boolean
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:users': modify users in your account
            'read:users': read your users
    api_key:
      type: apiKey
      name: api_key
      in: header
